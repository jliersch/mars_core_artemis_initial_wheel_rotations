diff --git a/src/CollisionManager.cpp b/src/CollisionManager.cpp
index cef7578..8f69e63 100644
--- a/src/CollisionManager.cpp
+++ b/src/CollisionManager.cpp
@@ -48,27 +48,29 @@ namespace mars
             {
                 for(size_t k=l+1; k<collisionItems.size(); ++k)
                 {
-                    const auto& ci1 = collisionItems[l].collisionInterface;
-                    const auto& ci2 = collisionItems[k].collisionInterface;
                     const auto& ci1PluginName = collisionItems[l].pluginName;
                     const auto& ci2PluginName = collisionItems[k].pluginName;
-                    handlerIt = collisionHandlers.find(std::make_pair(ci1PluginName,
-                                                                      ci2PluginName));
-                    if(handlerIt != collisionHandlers.end())
+
+                    // The handler may be registered for comparing ci1 with ci2 or ci2 with ci1.
+                    bool swap = false;
+                    handlerIt = collisionHandlers.find(std::make_pair(ci1PluginName, ci2PluginName));
+                    if (handlerIt == collisionHandlers.end())
                     {
-                        // extends contacts
-                        handlerIt->second->getContacts(ci1, ci2, contactVector);
-                        continue;
+                        swap = true;
+                        handlerIt = collisionHandlers.find(std::make_pair(ci2PluginName, ci1PluginName));
                     }
 
-                    handlerIt = collisionHandlers.find(std::make_pair(ci2PluginName,
-                                                                      ci1PluginName));
-                    if(handlerIt != collisionHandlers.end())
+                    if (handlerIt == collisionHandlers.end())
                     {
-                        // extends contacts
-                        handlerIt->second->getContacts(ci2, ci1, contactVector);
+                        const auto msg = std::string{"There is no collision handler for the contact between collision plugins \""} + ci1PluginName + "\" and \"" + ci2PluginName + "\".";
+                        // LOG_WARN(msg.c_str());
                         continue;
                     }
+
+                    // extends contacts
+                    const auto& ci1 = collisionItems[swap ? k : l].collisionInterface;
+                    const auto& ci2 = collisionItems[swap ? l : k].collisionInterface;
+                    handlerIt->second->getContacts(ci1, ci2, contactVector);
                 }
             }
         }
