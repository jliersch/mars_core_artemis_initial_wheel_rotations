diff --git a/src/JointManager.cpp b/src/JointManager.cpp
index bc3aa78..d9402ff 100644
--- a/src/JointManager.cpp
+++ b/src/JointManager.cpp
@@ -61,6 +61,7 @@ namespace mars
 
         unsigned long JointManager::addJoint(JointData *jointS, bool reload)
         {
+            std::cout << "JointManager::addJoint" << std::endl;
             auto jointMap = constructEnvireJointConfigMap(*jointS);
 
             // TODO: This should be handled at a central location
@@ -102,10 +103,12 @@ namespace mars
             constexpr bool sceneWasReseted = false;
             control->sim->sceneHasChanged(sceneWasReseted);
 
-            // id == 0 is invalid indicating getID that no specific id is desired
-            const unsigned long desiredId = jointS->config.hasKey("desired_id") ? jointS->config["desired_id"] : 0;
-
-            return ControlCenter::jointIDManager->addIfUnknown(jointS->name, desiredId);
+            if (jointS->config.hasKey("desired_id"))
+            {
+                const unsigned int desiredId = jointS->config["desired_id"];
+                // TODO ControlCenter::jointIDManager->requestSettingID(jointS->frameID, desiredId);
+            }
+            return getID(jointS->frameID);
         }
 
         int JointManager::getJointCount()
@@ -196,7 +199,9 @@ namespace mars
             {
                 throw std::logic_error((std::string{"JointManager::removeJoint: Could not remove joint with index "} + std::to_string(index)).c_str());
             }
+            std::cout << "remove joint " << std::endl;
             ControlCenter::jointIDManager->removeEntry(index);
+            std::cout << "remove joint fin " << std::endl;
 
             constexpr bool sceneWasReseted = false;
             control->sim->sceneHasChanged(sceneWasReseted);
@@ -245,6 +250,7 @@ namespace mars
 
         void JointManager::reattacheJoints(unsigned long node_id)
         {
+            std::cout << "JointManager::reattacheJoints" << std::endl;
             const auto& nodeName = ControlCenter::linkIDManager->getName(node_id);
             if (!ControlCenter::envireGraph->containsFrame(nodeName))
             {
@@ -419,11 +425,27 @@ namespace mars
 
         unsigned long JointManager::getID(const std::string& joint_name) const
         {
-            return ControlCenter::jointIDManager->getID(joint_name);
+            const auto& id = ControlCenter::jointIDManager->getID(joint_name);
+            if (id == INVALID_ID)
+            {
+                const auto msg = std::string{"JointManager::getID: Joint named \""} + joint_name + "\" does not have an id.";
+                LOG_WARN(msg.c_str());
+                std::cout << msg << std::endl;
+
+                std::vector<interfaces::core_objects_exchange> objs;
+                const_cast<JointManager*>(this)->getListJoints(&objs);
+                std::cout << "joints: " << std::endl;
+                for (const auto& obj : objs)
+                {
+                    std::cout << obj.index << ": " << obj.name << std::endl;
+                }
+            }
+            return id;
         }
 
         std::vector<unsigned long> JointManager::getIDsByNodeID(unsigned long node_id)
         {
+            std::cout << "JointManager::getIDsByNodeID" << std::endl;
             const auto& num_joints = ControlCenter::jointIDManager->size();
             auto jointIds = std::vector<unsigned long>(num_joints);
             const auto& frameId = ControlCenter::linkIDManager->getName(node_id);
@@ -445,9 +467,9 @@ namespace mars
                     const auto childFrameId = configMap["child_link_name"].toString();
                     if(parentFrameId == frameId || childFrameId == frameId)
                     {
-                        std::string jointName;
-                        jointItemPtr->getData().jointInterface->getName(&jointName);
-                        jointIds.push_back(ControlCenter::jointIDManager->getID(jointName));
+                        // std::string jointName;
+                        // jointItemPtr->getData().jointInterface->getName(&jointName);
+                        jointIds.push_back(ControlCenter::jointIDManager->getID(childFrameId));
                     }
                 }
             };
@@ -460,6 +482,7 @@ namespace mars
 
         unsigned long JointManager::getIDByNodeIDs(unsigned long id1, unsigned long id2)
         {
+            std::cout << "JointManager::getIDByNodeIDs" << std::endl;
             const auto& frameId1 = ControlCenter::linkIDManager->getName(id1);
             const auto& frameId2 = ControlCenter::linkIDManager->getName(id2);
       
@@ -467,7 +490,7 @@ namespace mars
             {
                 std::string jointName;
                 joint->getName(&jointName);
-                return ControlCenter::jointIDManager->getID(jointName);
+                return jointName.find(frameId1.c_str()) ? ControlCenter::jointIDManager->getID(frameId1) : ControlCenter::jointIDManager->getID(frameId2);
             }
             return 0;
         }
@@ -484,6 +507,7 @@ namespace mars
 
         void JointManager::setOfflineValue(unsigned long id, sReal value)
         {
+            std::cout << "setofflinevalue" << std::endl;
             // TODO: If value is too large, warn to avoid potential precision issues.
 
             if(const auto joint = getJointInterface(id).lock())
@@ -615,15 +639,12 @@ namespace mars
 
         const interfaces::JointData JointManager::constructJointData(const std::shared_ptr<interfaces::JointInterface> joint)
         {
-            std::string jointName;
-            joint->getName(&jointName);
-            const auto& jointId = ControlCenter::jointIDManager->getID(jointName);
-
             auto configMap = joint->getConfigMap();
             const auto parentNodeName = configMap["parent_link_name"].toString();
             const auto childNodeName = configMap["child_link_name"].toString();
             const auto& parentNodeId = ControlCenter::linkIDManager->getID(parentNodeName);
             const auto& childNodeId = ControlCenter::linkIDManager->getID(childNodeName);
+            const auto& jointId = ControlCenter::jointIDManager->getID(childNodeName);
 
             return JointData::fromJointInterface(joint, jointId, parentNodeId, childNodeId);
         }
@@ -657,12 +678,14 @@ namespace mars
 
         envire::core::ItemBase::Ptr JointManager::getItemBasePtr(unsigned long jointId)
         {
+            std::cout << "JointManager::getItemBasePtr" << std::endl;
             const auto jointName = std::string{ControlCenter::jointIDManager->getName(jointId)};
             return getItemBasePtr(jointName);
         }
 
         envire::core::ItemBase::Ptr JointManager::getItemBasePtr(const std::string& jointName)
         {
+            std::cout << "JointManager::getItemBasePtr" << std::endl;
             envire::core::ItemBase::Ptr foundItem = nullptr;
             auto jointInterfaceSearchFunctor = [&foundItem, jointName](envire::core::GraphTraits::vertex_descriptor node, envire::core::GraphTraits::vertex_descriptor parent) 
             {
@@ -701,12 +724,14 @@ namespace mars
 
         std::weak_ptr<interfaces::JointInterface> JointManager::getJointInterface(unsigned long jointId)
         {
+            std::cout << "JointManager::getJointInterface" << std::endl;
             const auto jointName = ControlCenter::jointIDManager->getName(jointId);
             return getJointInterface(jointName);
         }
 
         std::weak_ptr<interfaces::JointInterface> JointManager::getJointInterface(const std::string& jointName)
         {
+            std::cout << "JointManager::getJointInterface" << std::endl;
             auto foundJoint = std::shared_ptr<interfaces::JointInterface>{nullptr};
             auto jointInterfaceSearchFunctor = [&foundJoint, jointName](envire::core::GraphTraits::vertex_descriptor node, envire::core::GraphTraits::vertex_descriptor parent) 
             {
@@ -731,11 +756,13 @@ namespace mars
 
             const auto rootVertex = ControlCenter::envireGraph->getVertex(SIM_CENTER_FRAME_NAME);
             ControlCenter::graphTreeView->visitBfs(rootVertex, jointInterfaceSearchFunctor);
+            std::cout << "found joint" << std::endl;
             return foundJoint;
         }
 
         std::weak_ptr<interfaces::JointInterface> JointManager::getJointInterface(const envire::core::FrameId& linkedFrame0, const envire::core::FrameId& linkedFrame1)
         {
+            std::cout << "JointManager::getJointInterface" << std::endl;
             // Ensure that frames are directly connected.
             const bool parent0 = ControlCenter::envireGraph->containsEdge(linkedFrame0, linkedFrame1);
             const bool parent1 = ControlCenter::envireGraph->containsEdge(linkedFrame1, linkedFrame0);
@@ -754,6 +781,7 @@ namespace mars
                 if(configMap["parent_link_name"] == std::string{parentFrame})
                 {
                     // This assumes there is maximally one joint between each pair of frames.
+                    std::cout << "found joint" << std::endl;
                     return item->getData().jointInterface;
                 }
             }
